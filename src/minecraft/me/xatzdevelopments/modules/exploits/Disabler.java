package me.xatzdevelopments.modules.exploits;

import me.xatzdevelopments.events.Event;
import me.xatzdevelopments.events.listeners.EventMotion;
import me.xatzdevelopments.events.listeners.EventSendPacket;
import me.xatzdevelopments.modules.Module;
import me.xatzdevelopments.settings.BooleanSetting;
import me.xatzdevelopments.settings.ModeSetting;
import me.xatzdevelopments.util.RandomUtils;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C10PacketCreativeInventoryAction;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;

public class Disabler extends Module
{
    public ModeSetting Mode;
    public BooleanSetting CancelC00PacketKeepAlive;
    public BooleanSetting CancelC0FPacketConfirmTransaction;
    public BooleanSetting CancelC0BPacketEntityAction;
    boolean shouldCancel;
    Packet DelayPacket;
    int ticksExisted;
    int state;
    
    public Disabler() {
        super("Disabler", 0, Category.EXPLOITS, null);
        this.Mode = new ModeSetting("Mode", "Mineplex Combat", new String[] { "Mineplex Combat", "Custom", "Cubecraft", "Verus" });
        this.CancelC00PacketKeepAlive = new BooleanSetting("C00PacketKeepAlive", true);
        this.CancelC0FPacketConfirmTransaction = new BooleanSetting("C0FPacketConfirmTransaction", true);
        this.CancelC0BPacketEntityAction = new BooleanSetting("C0BPacketEntityAction", true);
        this.shouldCancel = true;
        this.addSettings(this.Mode, this.CancelC00PacketKeepAlive, this.CancelC0FPacketConfirmTransaction, this.CancelC0BPacketEntityAction);
    }
    
    @Override
    public void onEvent(final Event e) {
        Label_0684: {
            if (e instanceof EventMotion) {
                final String mode;
                switch (mode = this.Mode.getMode()) {
                    case "Mineplex Combat": {
                        if (this.mc.isIntegratedServerRunning() || !this.mc.getCurrentServerData().serverIP.toLowerCase().endsWith("mineplex.com")) {
                            return;
                        }
                        this.mc.thePlayer.sendQueue.addToSendQueue(new C10PacketCreativeInventoryAction(-1, this.mc.thePlayer.inventory.itemStack));
                        this.mc.thePlayer.sendQueue.addToSendQueue(new C13PacketPlayerAbilities(this.mc.thePlayer.capabilities));
                        this.mc.thePlayer.sendQueue.addToSendQueue(new C00PacketKeepAlive(RandomUtils.nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE)));
                        this.mc.thePlayer.sendQueue.addToSendQueue(new C0CPacketInput(RandomUtils.nextFloat(0.0f, 18.0f), RandomUtils.nextFloat(0.0f, 18.0f), true, true));
                        break;
                    }
                    case "Verus": {
                        if (this.mc.thePlayer.onGround) {
                            break;
                        }
                        this.mc.timer.timerSpeed = 4.9f;
                        switch (++this.state) {
                            case 0: {
                                this.mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX + 99413.0 + 5.0 + 20.0 + 5.0, this.mc.thePlayer.getEntityBoundingBox().minY + 99413.0 + 5.0 + 20.0 + 5.0, this.mc.thePlayer.posZ + 99413.0 + 5.0 + 20.0 + 5.0, true));
                                break Label_0684;
                            }
                            case 1: {
                                this.mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX - 99413.0 + 5.0 + 20.0 + 5.0, this.mc.thePlayer.getEntityBoundingBox().minY + 99413.0 + 5.0 + 20.0 + 5.0, this.mc.thePlayer.posZ - 99413.0 + 5.0 + 20.0 + 5.0, true));
                                break Label_0684;
                            }
                            case 2: {
                                this.mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX + 99413.0 + 5.0 + 20.0 + 5.0, this.mc.thePlayer.getEntityBoundingBox().minY + 99413.0 + 5.0 + 20.0 + 5.0, this.mc.thePlayer.posZ + 99413.0 + 5.0 + 20.0 + 5.0, true));
                                this.state = 0;
                                break Label_0684;
                            }
                        }
                        break;
                    }
                    case "Cubecraft": {
                        if (this.mc.thePlayer.ticksExisted % 6 == 0) {
                            final PlayerCapabilities playerCapabilities = new PlayerCapabilities();
                            playerCapabilities.setFlySpeed(0.2129f);
                            this.mc.thePlayer.sendQueue.addToSendQueue(new C13PacketPlayerAbilities(playerCapabilities));
                        }
                        ((EventMotion)e).onGround = false;
                        break;
                    }
                    default:
                        break;
                }
            }
        }
        if (e instanceof EventSendPacket) {
            final String mode2;
            switch (mode2 = this.Mode.getMode()) {
                case "Custom": {
                    final Packet p = ((EventSendPacket)e).getPacket();
                    if (p instanceof C0FPacketConfirmTransaction && this.CancelC0FPacketConfirmTransaction.isEnabled()) {
                        e.setCancelled(true);
                    }
                    if (p instanceof C00PacketKeepAlive && this.CancelC00PacketKeepAlive.isEnabled()) {
                        e.setCancelled(true);
                    }
                    if (p instanceof C0BPacketEntityAction && this.CancelC0BPacketEntityAction.isEnabled()) {
                        e.setCancelled(true);
                        break;
                    }
                    break;
                }
                default:
                    break;
            }
        }
    }
}
